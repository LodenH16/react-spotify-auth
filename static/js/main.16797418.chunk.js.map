{"version":3,"sources":["examplePfp.jpg","../../dist/spotify~bkRyBIbO.svg","../../src/Scopes.js","../../src/hash.js","../../src/spotify.svg","../../src/SpotifyAuth.jsx","TrackCard.jsx","App.js","index.js"],"names":["module","exports","scopes","hash","window","initial","item","parts","decodeURIComponent","require","constructor","props","super","event","url","this","join","isAuthenticatedWithSpotify","componentDidMount","accessToken","document","render","className","styles","rsaSpotifyContainer","onClick","handleClick","src","alt","rsaSpotifyLogo","SpotifyAuth","redirectUri","clientID","onAccessToken","console","containerClassName","btnClassName","title","TrackCard","style","width","track","album","images","waves","name","artists","map","artist","href","external_urls","spotify","App","useState","spotifyAuthToken","setSpotifyAuthToken","useEffect","Cookies","get","Provider","value","user","data","maxWidth","padding","defaultPfp","display_name","type","tracks","loading","error","items","ind","remove","location","Scopes","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.16797418.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/examplePfp.f6c53af4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spotify~bkRyBIbO.9c3dc69e.svg\";","/**\n * List of all Spotify Scopes\n */\nconst scopes = {\n  // images\n  ugcImageUpload: 'ugc-image-upload',\n\n  // follow\n  userFollowRead: 'user-follow-read',\n  userFollowModify: 'user-follow-modify',\n\n  // listening history\n  userReadRecentlyPlayed: 'user-read-recently-played',\n  userTopRead: 'user-top-read',\n  userReadPlaybackPosition: 'user-read-playback-position',\n\n  // library\n  userLibraryRead: 'user-library-read',\n  userLibraryModify: 'user-library-modify',\n\n  // spotify connect\n  userReadPlaybackState: 'user-read-playback-state',\n  userReadCurrentlyPlaying: 'user-read-currently-playing',\n  userModifyPlaybackState: 'user-modify-playback-state',\n\n  // playlists\n  playlistReadCollaborative: 'playlist-read-collaborative',\n  playlistModifyPrivate: 'playlist-modify-private',\n  playlistModifyPublic: 'playlist-modify-public',\n  playlistReadPrivate: 'playlist-read-private',\n\n  // playback\n  streaming: 'streaming',\n  appRemoteControl: 'app-remote-control',\n\n  // users\n  userReadEmail: 'user-read-email',\n  userReadPrivate: 'user-read-private'\n}\n\nexport default scopes\n","const hash = window.location.hash\n  .substring(1)\n  .split('&')\n  .reduce((initial, item) => {\n    if (item) {\n      var parts = item.split('=')\n      initial[parts[0]] = decodeURIComponent(parts[1])\n    }\n    return initial\n  }, {})\n\nexport default hash\n","/* loaded by smart-asset */\nexport default require(\"./spotify~bkRyBIbO.svg\")","/**\n * @class SpotifyAuth\n */\n\nimport React, { Component } from 'react'\nimport scopes from './Scopes'\nimport hash from './hash'\nimport styles from './styles.module.css'\n\n// import { ReactComponent as Spotify } from './spotify.svg'\nimport SpotifyLogo from './spotify.svg'\n\nclass SpotifyAuth extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthenticatedWithSpotify: false\n    }\n  }\n\n  getHash = () => {\n    return window.parent.location.hash\n      .substring(1)\n      .split('&')\n      .reduce((initial, item) => {\n        if (item) {\n          var parts = item.split('=')\n          initial[parts[0]] = decodeURIComponent(parts[1])\n        }\n        return initial\n      }, {})\n  }\n\n  componentDidMount() {\n    const accessToken = hash.access_token\n\n    if (accessToken) {\n      // eslint-disable-next-line prettier/prettier\n      document.cookie = `spotifyAuthToken=${accessToken}; max-age=${60 * 60};`\n\n      this.props.onAccessToken(accessToken)\n    }\n  }\n\n  handleClick = (event) => {\n    event.preventDefault()\n\n    const url =\n      'https://accounts.spotify.com/authorize' +\n      '?response_type=token' +\n      `&client_id=${this.props.clientID}` +\n      `&scope=${this.props.scopes.join('%20')}` +\n      `&redirect_uri=${this.props.redirectUri}` +\n      '&show_dialog=true'\n\n    window.location = url\n  }\n\n  render() {\n    return (\n      <div className={styles.rsaSpotifyContainer}>\n        <button\n          className={styles.rsaSpotifyBtn}\n          onClick={(event) => this.handleClick(event)}\n        >\n          <span className='dispText'>{this.props.title} </span>{' '}\n          <img\n            src={SpotifyLogo}\n            alt='Spotify Logo'\n            className={styles.rsaSpotifyLogo}\n          />\n        </button>\n      </div>\n    )\n  }\n}\n\nSpotifyAuth.defaultProps = {\n  redirectUri: 'http://localhost:3000/callback',\n  clientID: '1a70ba777fec4ffd9633c0c418bdcf39',\n  scopes: [scopes.userReadPrivate, scopes.userReadEmail],\n  onAccessToken: () => console.log('I have an access token'),\n  containerClassName: 'spotify-signin-container',\n  btnClassName: 'spotify-signin-btn',\n  title: 'Continue with Spotify'\n}\n\nexport default SpotifyAuth\n","import React from 'react';\r\n\r\nimport { MDBCol, MDBCard, MDBCardImage, MDBCardBody, MDBCardTitle, MDBCardText, MDBBtn } from \"mdbreact\";\r\n\r\nconst TrackCard = (props) => {\r\n  return (\r\n    <MDBCol>\r\n      <MDBCard style={{ width: '22rem' }}>\r\n        <MDBCardImage\r\n          className='img-fluid'\r\n          src={props.track.album.images[0].url}\r\n          waves\r\n        />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{props.track.name}</MDBCardTitle>\r\n          <MDBCardText>\r\n            {props.track.artists.map(artist => artist.name).join(' ')} <br />\r\n            {props.track.album.name}\r\n          </MDBCardText>\r\n          <MDBBtn href={props.track.external_urls.spotify}>Listen on Spotify</MDBBtn>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </MDBCol>\r\n  )\r\n}\r\n\r\nexport default TrackCard;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { SpotifyApiContext, User, UserTop } from 'react-spotify-api'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\r\nimport 'react-spotify-auth/dist/index.css'\r\n\r\nimport { MDBCol, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBBtn } from \"mdbreact\";\r\nimport 'mdbreact/dist/css/mdb.css'\r\n\r\nimport './index.css';\r\nimport './App.scss';\r\nimport TrackCard from \"./TrackCard\";\r\nimport defaultPfp from './examplePfp.jpg';\r\n\r\nconst App = () => {\r\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState()\r\n\r\n  useEffect(() => {\r\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [Cookies.get('spotifyAuthToken')])\r\n\r\n  const logout = () => {\r\n    Cookies.remove('spotifyAuthToken')\r\n    window.location = '/'\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <MDBContainer>\r\n        {/* If there is a cookie named 'spotifyAuthToken' */}\r\n        {Cookies.get('spotifyAuthToken') ? (\r\n          // Display the app\r\n          <>\r\n            <MDBRow>\r\n              <h1>Hi! How's it going?</h1>\r\n            </MDBRow>\r\n\r\n            <SpotifyApiContext.Provider value={spotifyAuthToken}>\r\n              <User>\r\n                {(user) =>\r\n                  user && user.data ? (\r\n                    <>\r\n                      <MDBCol style={{ maxWidth: '22rem', padding: '0 0 1rem 1rem' }}>\r\n                        <MDBCard>\r\n                          <MDBCardImage\r\n                            className='img-fluid'\r\n                            src={user.data.images[0] ? user.data.images[0].url : defaultPfp}\r\n                            alt='Your Spotify Profile Picture'\r\n                            waves\r\n                          />\r\n                          <MDBCardBody style={{padding: '1rem'}}>\r\n                            <MDBCardTitle>\r\n                              Welcome, {user.data.display_name}\r\n                            </MDBCardTitle>\r\n                            <MDBCardText>\r\n                              Here's some of your top tracks, as listed by Spotify.\r\n                              </MDBCardText>\r\n                          </MDBCardBody>\r\n                        </MDBCard>\r\n                      </MDBCol>\r\n                    </>\r\n                  ) : (\r\n                      <p>Loading...</p>\r\n                    )\r\n                }\r\n              </User>\r\n\r\n              <MDBRow className=\"masonry-with-columns\">\r\n                <UserTop type=\"tracks\">\r\n                  {(tracks, loading, error) =>\r\n                    tracks && tracks.data ? (\r\n                      tracks.data.items.map((track, ind) => {\r\n                        return (\r\n                          <>\r\n                            <TrackCard\r\n                              track={track} />\r\n                          </>\r\n                        )\r\n                      })\r\n                    ) : null\r\n                  }\r\n                </UserTop>\r\n              </MDBRow>\r\n            </SpotifyApiContext.Provider>\r\n            <MDBBtn onClick={logout}>\r\n              Logout\r\n            </MDBBtn>\r\n          </>\r\n        ) : (\r\n            // Display the login page\r\n            <SpotifyAuth\r\n              redirectUri='http://localhost:3000/callback'\r\n              clientID='1a70ba777fec4ffd9633c0c418bdcf39'\r\n              scopes={[Scopes.userReadPrivate, Scopes.userReadEmail, Scopes.userTopRead]}\r\n            />\r\n          )}\r\n      </MDBContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}