{"version":3,"sources":["TrackCard.jsx","../../src/Scopes.js","../../src/generateUrl.js","../../src/SpotifyLogo.jsx","../../src/getHash.js","../../src/SpotifyAuth.jsx","../../src/SpotifyAuthListener.jsx","../../src/index.js","App.js","index.js","examplePfp.jpg"],"names":["TrackCard","props","style","width","className","src","track","album","images","url","waves","name","artists","map","artist","join","href","external_urls","spotify","scopes","ugcImageUpload","userFollowRead","userFollowModify","userReadRecentlyPlayed","userTopRead","userReadPlaybackPosition","userLibraryRead","userLibraryModify","userReadPlaybackState","userReadCurrentlyPlaying","userModifyPlaybackState","playlistReadCollaborative","playlistModifyPrivate","playlistModifyPublic","playlistReadPrivate","streaming","appRemoteControl","userReadEmail","userReadPrivate","allScopes","Object","sum","SpotifyLogo","xmlns","viewBox","styles","d","t","string","getHash","window","parts","item","initial","decodeURIComponent","SpotifyAuth","event","clientID","redirectUri","getRedirectUri","isAuthenticatedWithSpotify","componentDidMount","accessToken","this","document","render","btnClassName","onClick","logoClassName","Component","onAccessToken","title","noLogo","noCookie","localStorage","bool","SpotifyAuthListener","useEffect","func","Scopes","App","useState","spotifyAuthToken","setSpotifyAuthToken","Cookies","get","console","log","all","Provider","value","user","data","maxWidth","padding","defaultPfp","alt","display_name","type","tracks","loading","error","items","ind","remove","path","location","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.460153cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { MDBCol, MDBCard, MDBCardImage, MDBCardBody, MDBCardTitle, MDBCardText, MDBBtn } from \"mdbreact\";\r\n\r\nconst TrackCard = (props) => {\r\n  return (\r\n    <MDBCol>\r\n      <MDBCard style={{ width: '22rem' }}>\r\n        <MDBCardImage\r\n          className='img-fluid'\r\n          src={props.track.album.images[0].url}\r\n          waves\r\n        />\r\n        <MDBCardBody>\r\n          <MDBCardTitle>{props.track.name}</MDBCardTitle>\r\n          <MDBCardText>\r\n            {props.track.artists.map(artist => artist.name).join(' ')} <br />\r\n            {props.track.album.name}\r\n          </MDBCardText>\r\n          <MDBBtn href={props.track.external_urls.spotify}>Listen on Spotify</MDBBtn>\r\n        </MDBCardBody>\r\n      </MDBCard>\r\n    </MDBCol>\r\n  )\r\n}\r\n\r\nexport default TrackCard;\r\n","/**\n * List of all Spotify Scopes\n */\nconst scopes = {\n  // images\n  ugcImageUpload: 'ugc-image-upload',\n\n  // follow\n  userFollowRead: 'user-follow-read',\n  userFollowModify: 'user-follow-modify',\n\n  // listening history\n  userReadRecentlyPlayed: 'user-read-recently-played',\n  userTopRead: 'user-top-read',\n  userReadPlaybackPosition: 'user-read-playback-position',\n\n  // library\n  userLibraryRead: 'user-library-read',\n  userLibraryModify: 'user-library-modify',\n\n  // spotify connect\n  userReadPlaybackState: 'user-read-playback-state',\n  userReadCurrentlyPlaying: 'user-read-currently-playing',\n  userModifyPlaybackState: 'user-modify-playback-state',\n\n  // playlists\n  playlistReadCollaborative: 'playlist-read-collaborative',\n  playlistModifyPrivate: 'playlist-modify-private',\n  playlistModifyPublic: 'playlist-modify-public',\n  playlistReadPrivate: 'playlist-read-private',\n\n  // playback\n  streaming: 'streaming',\n  appRemoteControl: 'app-remote-control',\n\n  // users\n  userReadEmail: 'user-read-email',\n  userReadPrivate: 'user-read-private'\n}\n\nexport const allScopes = (() => {\n  return Object.keys(scopes)\n    .reduce((sum, scope) => {\n      return sum.concat(scopes[scope], '%20')\n    }, '')\n    .slice(0, -3)\n})()\n\nexport default scopes\n","const getRedirectUrl = (clientID, scopes, redirectUri) => {\n  return (\n    'https://accounts.spotify.com/authorize?response_type=token' +\n    `&client_id=${clientID}` +\n    `&scope=${scopes.join('%20')}` +\n    `&redirect_uri=${redirectUri}` +\n    '&show_dialog=true'\n  )\n}\n\nexport default getRedirectUrl\n","import React from 'react'\nimport styles from './SpotifyAuth.css'\nimport t from 'prop-types'\n\nconst SpotifyLogo = (props) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      viewBox='0 0 496 512'\n      className={props.className || styles.rsaSpotifyLogo}\n    >\n      <path d='M248 8C111.1 8 0 119.1 0 256s111.1 248 248 248 248-111.1 248-248S384.9 8 248 8zm100.7 364.9c-4.2 0-6.8-1.3-10.7-3.6-62.4-37.6-135-39.2-206.7-24.5-3.9 1-9 2.6-11.9 2.6-9.7 0-15.8-7.7-15.8-15.8 0-10.3 6.1-15.2 13.6-16.8 81.9-18.1 165.6-16.5 237 26.2 6.1 3.9 9.7 7.4 9.7 16.5s-7.1 15.4-15.2 15.4zm26.9-65.6c-5.2 0-8.7-2.3-12.3-4.2-62.5-37-155.7-51.9-238.6-29.4-4.8 1.3-7.4 2.6-11.9 2.6-10.7 0-19.4-8.7-19.4-19.4s5.2-17.8 15.5-20.7c27.8-7.8 56.2-13.6 97.8-13.6 64.9 0 127.6 16.1 177 45.5 8.1 4.8 11.3 11 11.3 19.7-.1 10.8-8.5 19.5-19.4 19.5zm31-76.2c-5.2 0-8.4-1.3-12.9-3.9-71.2-42.5-198.5-52.7-280.9-29.7-3.6 1-8.1 2.6-12.9 2.6-13.2 0-23.3-10.3-23.3-23.6 0-13.6 8.4-21.3 17.4-23.9 35.2-10.3 74.6-15.2 117.5-15.2 73 0 149.5 15.2 205.4 47.8 7.8 4.5 12.9 10.7 12.9 22.6 0 13.6-11 23.3-23.2 23.3z' />\n    </svg>\n  )\n}\n\nSpotifyLogo.propTypes = {\n  className: t.string\n}\n\nexport default SpotifyLogo\n","export const getHash = () => {\n  return window\n    ? window.parent.location.hash\n        .substring(1)\n        .split('&')\n        .reduce((initial, item) => {\n          if (item) {\n            var parts = item.split('=')\n            initial[parts[0]] = decodeURIComponent(parts[1])\n          }\n          return initial\n        }, {})\n    : ''\n}\n","/**\n * @class SpotifyAuth\n */\n\nimport React, { Component } from 'react'\nimport scopes from './Scopes'\nimport getRedirectUri from './generateUrl'\n\nimport styles from './SpotifyAuth.css'\nimport t from 'prop-types'\nimport SpotifyLogo from './SpotifyLogo'\nimport { getHash } from './getHash'\n\nclass SpotifyAuth extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthenticatedWithSpotify: false\n    }\n  }\n\n  componentDidMount() {\n    const accessToken = getHash().access_token\n\n    if (accessToken) {\n      if (!this.props.noCookie) {\n        document.cookie = `spotifyAuthToken=${accessToken}; max-age=${60 * 60};`\n      }\n      if (this.props.localStorage) {\n        window.localStorage.setItem('spotifyAuthToken', accessToken)\n      }\n      this.props.onAccessToken(accessToken)\n    }\n  }\n\n  handleClick = (event) => {\n    event.preventDefault()\n\n    window.location = getRedirectUri(\n      this.props.clientID,\n      this.props.scopes,\n      this.props.redirectUri\n    )\n  }\n\n  render() {\n    return (\n      <button\n        className={this.props.btnClassName || styles.rsaSpotifyBtn}\n        onClick={(event) => this.handleClick(event)}\n      >\n        {!this.props.noLogo && (\n          <SpotifyLogo className={this.props.logoClassName} />\n        )}\n        <span>{this.props.title}</span>\n      </button>\n    )\n  }\n}\n\nSpotifyAuth.propTypes = {\n  redirectUri: t.string.isRequired,\n  clientID: t.string.isRequired,\n  scopes: t.arrayOf(t.string),\n  onAccessToken: t.func,\n  logoClassName: t.string,\n  title: t.string,\n  noLogo: t.bool,\n  noCookie: t.bool,\n  localStorage: t.bool\n}\n\nSpotifyAuth.defaultProps = {\n  redirectUri: 'http://localhost:3000',\n  scopes: [scopes.userReadPrivate, scopes.userReadEmail],\n  onAccessToken: (token) => {},\n  title: 'Continue with Spotify',\n  localStorage: false,\n  noLogo: false,\n  noCookie: false\n}\n\nexport default SpotifyAuth\n","import { useEffect } from 'react'\n\nimport { getHash } from './getHash'\nimport t from 'prop-types'\n\nconst SpotifyAuthListener = (props) => {\n  useEffect(() => {\n    const accessToken = getHash().access_token\n\n    if (accessToken) {\n      if (!props.noCookie) {\n        document.cookie = `spotifyAuthToken=${accessToken}; max-age=${60 * 60};`\n      }\n      if (props.localStorage) {\n        window.localStorage.setItem('spotifyAuthToken', accessToken)\n      }\n      props.onAccessToken(accessToken)\n    }\n  }, [])\n\n  return null\n}\n\nSpotifyAuthListener.propTypes = {\n  noCookie: t.bool,\n  localStorage: t.bool,\n  onAccessToken: t.func\n}\n\nSpotifyAuthListener.defaultProps = {\n  noCookie: false,\n  localStorage: false,\n  onAccessToken: (token) => {}\n}\n\nexport default SpotifyAuthListener\n","import Scopes, { allScopes } from './Scopes'\nimport SpotifyAuth from './SpotifyAuth'\nimport SpotifyAuthListener from './SpotifyAuthListener'\n\nScopes.all = allScopes\n\nexport { Scopes, SpotifyAuth, SpotifyAuthListener }\n","import React, { useEffect, useState } from 'react'\r\nimport { SpotifyApiContext, User, UserTop } from 'react-spotify-api'\r\nimport {\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCard,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBCardTitle,\r\n  MDBCardText,\r\n  MDBBtn\r\n} from 'mdbreact'\r\nimport 'mdbreact/dist/css/mdb.css'\r\nimport Cookies from 'js-cookie'\r\n\r\nimport TrackCard from './TrackCard'\r\nimport defaultPfp from './examplePfp.jpg'\r\nimport './App.css'\r\nimport './index.css'\r\n\r\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\r\nimport 'react-spotify-auth/dist/index.css'\r\n\r\nconst dev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\r\n\r\nconst App = () => {\r\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState()\r\n\r\n  useEffect(() => {\r\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\r\n    console.log(Scopes.all)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [Cookies.get('spotifyAuthToken')])\r\n\r\n  const logout = () => {\r\n    Cookies.remove('spotifyAuthToken', {\r\n      path: dev ? '' : 'react-spotify-auth'\r\n    })\r\n    window.location = dev ? '/' : '/react-spotify-auth'\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n      <MDBContainer>\r\n        {/* If there is a cookie named 'spotifyAuthToken' */}\r\n        {Cookies.get('spotifyAuthToken') ? (\r\n          // Display the app\r\n          <>\r\n            <MDBRow>\r\n              <h1>Hi! How's it going?</h1>\r\n            </MDBRow>\r\n\r\n            <SpotifyApiContext.Provider value={spotifyAuthToken}>\r\n              <User>\r\n                {(user) =>\r\n                  user && user.data ? (\r\n                    <>\r\n                      <MDBCol\r\n                        style={{ maxWidth: '22rem', padding: '0 0 1rem 1rem' }}\r\n                      >\r\n                        <MDBCard>\r\n                          <MDBCardImage\r\n                            className='img-fluid'\r\n                            src={\r\n                              user.data.images[0]\r\n                                ? user.data.images[0].url\r\n                                : defaultPfp\r\n                            }\r\n                            alt='Your Spotify Profile Picture'\r\n                            waves\r\n                          />\r\n                          <MDBCardBody style={{ padding: '1rem' }}>\r\n                            <MDBCardTitle>\r\n                              Welcome, {user.data.display_name}\r\n                            </MDBCardTitle>\r\n                            <MDBCardText>\r\n                              Here's some of your top tracks, as listed by\r\n                              Spotify.\r\n                            </MDBCardText>\r\n                          </MDBCardBody>\r\n                        </MDBCard>\r\n                      </MDBCol>\r\n                    </>\r\n                  ) : (\r\n                    <p>Loading...</p>\r\n                  )\r\n                }\r\n              </User>\r\n\r\n              <MDBRow className='masonry-with-columns'>\r\n                <UserTop type='tracks'>\r\n                  {(tracks, loading, error) =>\r\n                    tracks && tracks.data\r\n                      ? tracks.data.items.map((track, ind) => {\r\n                          return (\r\n                            <>\r\n                              <TrackCard track={track} />\r\n                            </>\r\n                          )\r\n                        })\r\n                      : null\r\n                  }\r\n                </UserTop>\r\n              </MDBRow>\r\n            </SpotifyApiContext.Provider>\r\n            <MDBBtn onClick={logout}>Logout</MDBBtn>\r\n          </>\r\n        ) : (\r\n          <div className='login-page'>\r\n            <h1>React Spotify Auth Demo</h1>\r\n            <h2>Sign in to get started</h2>\r\n            {/*  Display the login page */}\r\n\r\n            <div className='spotifyBtn'>\r\n              <SpotifyAuth\r\n                redirectUri={\r\n                  dev\r\n                    ? 'http://localhost:3000/callback'\r\n                    : 'http://kevinjiang.ca/react-spotify-auth'\r\n                }\r\n                clientID='1a70ba777fec4ffd9633c0c418bdcf39'\r\n                scopes={[\r\n                  Scopes.userReadPrivate,\r\n                  Scopes.userReadEmail,\r\n                  'user-top-read'\r\n                ]}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </MDBContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/examplePfp.f6c53af4.jpg\";"],"sourceRoot":""}