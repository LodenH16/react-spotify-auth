{"version":3,"sources":["../../src/Scopes.js","../../src/hash.js","../../src/SpotifyAuth.jsx","TrackCard.jsx","App.js","index.js"],"names":["scopes","hash","window","parts","item","initial","decodeURIComponent","SpotifyAuth","event","url","isAuthenticatedWithSpotify","componentDidMount","accessToken","document","this","render","className","props","containerClassName","onClick","Component","redirectUri","clientID","onAccessToken","console","btnClassName","title","TrackCard","style","width","src","track","album","images","waves","name","artists","map","artist","join","href","external_urls","spotify","App","useState","spotifyAuthToken","setSpotifyAuthToken","useEffect","Cookies","get","Provider","value","user","data","maxWidth","alt","display_name","type","tracks","loading","error","items","ind","remove","location","Scopes","ReactDOM","getElementById"],"mappings":"gTAGMA,EAAS,gBAATA,EAAS,kBAATA,EAkCa,oBCrCnB,IAAMC,EAAOC,OAAA,8CAGH,cACN,KAAU,CACR,IAAIC,EAAQC,QAAZ,KACAC,EAAQF,EAARE,IAAoBC,mBAAmBH,EAAvCE,IAEF,WARJ,ICSME,c,QACJ,cAAmB,aACjB,wBADiB,QAOT,WACR,OAAOL,OAAA,qDAGG,cACN,KAAU,CACR,IAAIC,EAAQC,QAAZ,KACAC,EAAQF,EAARE,IAAoBC,mBAAmBH,EAAvCE,IAEF,WARJ,KARiB,cA+BL,YACZG,mBAEA,IAAMC,EACJ,wEAEc,QAFd,mBAGU,oBAHV,wBAIiB,QAJjB,YADF,oBAQAP,mBAxCA,QAAa,CACXQ,4BAA4B,GAHb,E,kHAoBnBC,6BACE,IAAMC,EAAcX,EAApB,aAEA,IAEEY,wDAEAC,KAAA,yB,EAkBJC,kBAAS,WACP,OACE,yBAAKC,UAAWF,KAAKG,MAAMC,oBACzB,4BACEF,UAAWF,KAAKG,MADlB,aAEEE,QAAS,mBAAW,cAAX,KAERL,KAAKG,MANZ,S,EA/CEV,CAAoBa,aA4D1Bb,eAA2B,CACzBc,YADyB,iCAEzBC,SAFyB,mCAGzBtB,OAAQ,CAACA,EAAwBA,GACjCuB,cAAe,kBAAMC,YAAN,2BACfN,mBALyB,2BAMzBO,aANyB,qBAOzBC,MAAO,yB,uBClDMC,MAtBIV,GAEf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASW,MAAO,CAAEC,MAAO,UACvB,kBAAC,IAAD,CACEb,UAAU,YACVc,IAAKb,EAAMc,MAAMC,MAAMC,OAAO,GAAGxB,IACjCyB,OAAK,IAEP,kBAAC,IAAD,KACE,kBAAC,IAAD,KAAejB,EAAMc,MAAMI,MAC3B,kBAAC,IAAD,KACGlB,EAAMc,MAAMK,QAAQC,IAAIC,GAAUA,EAAOH,MAAMI,KAAK,KADvD,IAC6D,6BAC1DtB,EAAMc,MAAMC,MAAMG,MAErB,kBAAC,IAAD,CAAQK,KAAMvB,EAAMc,MAAMU,cAAcC,SAAxC,wBCiFKC,MAxFH,KAAO,MAAD,EACgCC,qBADhC,mBACTC,EADS,KACSC,EADT,KAGhBC,oBAAU,KACRD,EAAoBE,IAAQC,IAAI,sBAE/B,CAACD,IAAQC,IAAI,sBAOhB,OACE,yBAAKjC,UAAU,OACb,kBAAC,IAAD,KAEGgC,IAAQC,IAAI,oBAEX,oCACE,kBAAC,IAAD,KACE,oDAGF,kBAAC,IAAkBC,SAAnB,CAA4BC,MAAON,GACjC,kBAAC,IAAD,KACIO,GACAA,GAAQA,EAAKC,KACX,oCACE,kBAAC,IAAD,CAAQzB,MAAO,CAAE0B,SAAU,UACzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEtC,UAAU,YACVc,IAAKsB,EAAKC,KAAKpB,OAAO,GAAGxB,IACzB8C,IAAI,+BACJrB,OAAK,IAEP,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACYkB,EAAKC,KAAKG,cAEtB,kBAAC,IAAD,2GAUN,0CAIR,kBAAC,IAAD,CAASC,KAAK,UACX,CAACC,EAAQC,EAASC,IACjBF,GAAUA,EAAOL,KACfK,EAAOL,KAAKQ,MAAMxB,IAAI,CAACN,EAAO+B,IAE1B,oCACE,kBAAC,EAAD,CACE/B,MAAOA,MAIb,OAIV,4BAAQf,UAAU,SAASG,QA9DtB,KACb6B,IAAQe,OAAO,oBACf7D,OAAO8D,SAAW,MA4DV,WAMA,kBAAC,EAAD,CACE3C,YAAY,iCACZC,SAAS,mCACTtB,OAAQ,CAACiE,EAAwBA,EAAsBA,GACvDjD,UAAU,gBCtFxBkD,IAASnD,OAAO,kBAAC,EAAD,MAASF,SAASsD,eAAe,W","file":"static/js/main.9901b068.chunk.js","sourcesContent":["/**\n * List of all Spotify Scopes\n */\nconst scopes = {\n  // images\n  ugcImageUpload: 'ugc-image-upload',\n\n  // follow\n  userFollowRead: 'user-follow-read',\n  userFollowModify: 'user-follow-modify',\n\n  // listening history\n  userReadRecentlyPlayed: 'user-read-recently-played',\n  userTopRead: 'user-top-read',\n  userReadPlaybackPosition: 'user-read-playback-position',\n\n  // library\n  userLibraryRead: 'user-library-read',\n  userLibraryModify: 'user-library-modify',\n\n  // spotify connect\n  userReadPlaybackState: 'user-read-playback-state',\n  userReadCurrentlyPlaying: 'user-read-currently-playing',\n  userModifyPlaybackState: 'user-modify-playback-state',\n\n  // playlists\n  playlistReadCollaborative: 'playlist-read-collaborative',\n  playlistModifyPrivate: 'playlist-modify-private',\n  playlistModifyPublic: 'playlist-modify-public',\n  playlistReadPrivate: 'playlist-read-private',\n\n  // playback\n  streaming: 'streaming',\n  appRemoteControl: 'app-remote-control',\n\n  // users\n  userReadEmail: 'user-read-email',\n  userReadPrivate: 'user-read-private'\n}\n\nexport default scopes;\n","const hash = window.location.hash\n  .substring(1)\n  .split('&')\n  .reduce((initial, item) => {\n    if (item) {\n      var parts = item.split('=');\n      initial[parts[0]] = decodeURIComponent(parts[1])\n    }\n    return initial\n  }, {});\n\n\nexport default hash\n","/**\n * @class SpotifyAuth\n */\n\nimport React, { Component } from 'react'\nimport scopes from './Scopes'\nimport hash from './hash'\nimport styles from './styles.module.css'\n\nclass SpotifyAuth extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isAuthenticatedWithSpotify: false\n    }\n  }\n\n  getHash = () => {\n    return window.parent.location.hash\n      .substring(1)\n      .split('&')\n      .reduce((initial, item) => {\n        if (item) {\n          var parts = item.split('=')\n          initial[parts[0]] = decodeURIComponent(parts[1])\n        }\n        return initial\n      }, {})\n  }\n\n  componentDidMount() {\n    const accessToken = hash.access_token\n\n    if (accessToken) {\n      // eslint-disable-next-line prettier/prettier\n      document.cookie = `spotifyAuthToken=${accessToken}; max-age=${60 * 60};`\n\n      this.props.onAccessToken(accessToken)\n    }\n  }\n\n  handleClick = (event) => {\n    event.preventDefault()\n\n    const url =\n      'https://accounts.spotify.com/authorize' +\n      '?response_type=token' +\n      `&client_id=${this.props.clientID}` +\n      `&scope=${this.props.scopes.join('%20')}` +\n      `&redirect_uri=${this.props.redirectUri}` +\n      '&show_dialog=true'\n\n    window.location = url\n  }\n\n  render() {\n    return (\n      <div className={this.props.containerClassName}>\n        <button\n          className={this.props.btnClassName}\n          onClick={(event) => this.handleClick(event)}\n        >\n          {this.props.title}\n        </button>\n      </div>\n    )\n  }\n}\n\nSpotifyAuth.defaultProps = {\n  redirectUri: 'http://localhost:3000/callback',\n  clientID: '1a70ba777fec4ffd9633c0c418bdcf39',\n  scopes: [scopes.userReadPrivate, scopes.userReadEmail],\n  onAccessToken: () => console.log('I have an access token'),\n  containerClassName: 'spotify-signin-container',\n  btnClassName: 'spotify-signin-btn',\n  title: 'Continue with Spotify'\n}\n\nexport default SpotifyAuth\n","import React from 'react';\n\nimport { MDBCol, MDBCard, MDBCardImage, MDBCardBody, MDBCardTitle, MDBCardText, MDBBtn, MDBTypography } from \"mdbreact\";\n\nconst TrackCard = (props) => {\n  return (\n    <MDBCol>\n      <MDBCard style={{ width: '22rem' }}>\n        <MDBCardImage\n          className='img-fluid'\n          src={props.track.album.images[0].url}\n          waves\n        />\n        <MDBCardBody>\n          <MDBCardTitle>{props.track.name}</MDBCardTitle>\n          <MDBCardText>\n            {props.track.artists.map(artist => artist.name).join(' ')} <br />\n            {props.track.album.name}\n          </MDBCardText>\n          <MDBBtn href={props.track.external_urls.spotify}>Listen on Spotify</MDBBtn>\n        </MDBCardBody>\n      </MDBCard>\n    </MDBCol>\n  )\n}\n\nexport default TrackCard;\n","import React, { useEffect, useState } from 'react'\nimport { SpotifyApiContext, User, UserTop, UserPlaylists } from 'react-spotify-api'\nimport Cookies from 'js-cookie'\n\nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\nimport 'react-spotify-auth/dist/index.css'\n\nimport { MDBCol, MDBContainer, MDBRow, MDBCard, MDBCardBody, MDBCardImage, MDBCardUp, MDBCardTitle, MDBCardText, MDBAvatar, MDBFlippingCard, MDBBtn } from \"mdbreact\";\nimport 'mdbreact/dist/css/mdb.css'\n\nimport TrackCard from \"./TrackCard\";\n\nconst App = () => {\n  const [spotifyAuthToken, setSpotifyAuthToken] = useState()\n\n  useEffect(() => {\n    setSpotifyAuthToken(Cookies.get('spotifyAuthToken'))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [Cookies.get('spotifyAuthToken')])\n\n  const logout = () => {\n    Cookies.remove('spotifyAuthToken')\n    window.location = '/'\n  }\n\n  return (\n    <div className='app'>\n      <MDBContainer>\n        {/* If there is a cookie named 'spotifyAuthToken' */}\n        {Cookies.get('spotifyAuthToken') ? (\n          // Display the app\n          <>\n            <MDBRow>\n              <h1>Hi! How's it going?</h1>\n            </MDBRow>\n\n            <SpotifyApiContext.Provider value={spotifyAuthToken}>\n              <User>\n                {(user) =>\n                  user && user.data ? (\n                    <>\n                      <MDBCol style={{ maxWidth: '22rem' }}>\n                        <MDBCard>\n                          <MDBCardImage\n                            className='img-fluid'\n                            src={user.data.images[0].url}\n                            alt='Your Spotify Profile Picture'\n                            waves\n                          />\n                          <MDBCardBody>\n                            <MDBCardTitle>\n                              Welcome, {user.data.display_name}\n                            </MDBCardTitle>\n                            <MDBCardText>\n                              Some quick example text to build on the card\n                              title and make up the bulk of the card's\n                              content.\n                              </MDBCardText>\n                          </MDBCardBody>\n                        </MDBCard>\n                      </MDBCol>\n                    </>\n                  ) : (\n                      <p>Loading...</p>\n                    )\n                }\n              </User>\n              <UserTop type=\"tracks\">\n                {(tracks, loading, error) =>\n                  tracks && tracks.data ? (\n                    tracks.data.items.map((track, ind) => {\n                      return (\n                        <>\n                          <TrackCard\n                            track={track} />\n                        </>\n                      )\n                    })\n                  ) : null\n                }\n              </UserTop>\n            </SpotifyApiContext.Provider>\n            <button className='logout' onClick={logout}>\n              Logout\n            </button>\n          </>\n        ) : (\n            // Display the login page\n            <SpotifyAuth\n              redirectUri='http://localhost:3000/callback'\n              clientID='1a70ba777fec4ffd9633c0c418bdcf39'\n              scopes={[Scopes.userReadPrivate, Scopes.userReadEmail, Scopes.userTopRead]}\n              className='centered'\n            />\n          )}\n      </MDBContainer>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}